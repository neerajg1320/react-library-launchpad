react-library-launchpad/ $ history

cd Projects
cd Glassball
cd Production

mkdir react-library-launchpad
cd react-library-launchpad

npm init -y
lerna init

touch project.txt
idea .

mkdir packages/components

lerna create @glassball/button --yes
lerna create @glassball/text --yes
lerna create @glassball/gallery --yes

mv packages/button packages/components
mv packages/text packages/components
mv packages/gallery packages/components

vi package.json

  "workspaces": [
    "packages/components/*"
  ],

lerna create @glassball/builder-rollup --yes
# We do not move this to components as this is not a components

lerna add @glassball/button --scope=@glassball/gallery
lerna add @glassball/text --scope=@glassball/gallery
lerna add react --dev --scope '{@glassball/button,@glassball/text}'
lerna add react@18.x --peer --scope '{@glassball/button,@glassball/text}'

lerna add clsx --dev --scope '{@glassball/button,@glassball/text}'

## Setup builder wiring
# Create a test script
$ cd packages/builder-rollup

# Wire the CLI
"bin": {
  "builder-rollup": "./lib/builder-rollup.js"
},

# For testing we will just create a stub file:

$ vi packages/builder-rollup/lib/builder-rollup.js
#!/usr/bin/env node
console.log('Lets Build');

chmod +x packages/builder-rollup/lib/builder-rollup.js

lerna add @glassball/builder-rollup --dev --scope '{@glassball/button,@glassball/text,@glassball/gallery}'

# Add a target in all three packages
    "build": "builder-rollup",

# Commit
git status .
vi .gitignore
git add .
git commit -m "Initial Commit"
git remote add origin git@github.com:neeraj76/react-library-launchpad.git\ngit push -u origin master

## Write the builder script

lerna add rollup --scope=@glassball/builder-rollup
lerna add @babel/core --scope=@glassball/builder-rollup
lerna add @babel/preset-env --scope=@glassball/builder-rollup
lerna add @babel/preset-react --scope=@glassball/builder-rollup
lerna add @rollup/plugin-babel --scope=@glassball/builder-rollup
lerna add @rollup/plugin-node-resolve --scope=@glassball/builder-rollup
lerna add rollup-plugin-postcss --scope=@glassball/builder-rollup
lerna add postcss --scope=@glassball/builder-rollup

# We need postcss for CSS modules support

# build scripts completion
# In each of the packages we have
    "build": "builder-rollup",
    "clean": "rm -rf dist",
    "purge": "rm -rf node_modules",

# In the main package.json
  "scripts": {
    "build": "lerna run build",
    "clean": "rm -rf dist",
    "purge": "rm -rf node_modules"
  },

## Add Storybook
npx -p @storybook/cli sb init --type react
# Press y to create .npmrc

npm install --save-dev react react-dom
# We already have react installed due to components but the react-dom gets installed

$ npm run storybook
# The storybook is running

git status .
git add .
git commit -m "Added the storybook. Its working with default stories"
git push
git push -u origin storybook

# Wire the component stories to the storybook.
vi .storybook/main.js
module.exports = {
  "stories": [
    "../packages/**/*.stories.mdx",
    "../packages/**/*.stories.@(js|jsx|ts|tsx)"
  ],
:
}

# Create docs folder in button and text packages
mkdir packages/components/button/docs
mkdir packages/components/text/docs

# Add the support for CSS modules in storybook as our components are using the same.
# The support for CSS modules in the builder-rollup has already been added.
  webpackFinal: async (config) => {
    // remove default css rule from storybook
    config.module.rules = config.module.rules.filter((f) => f.test.toString() !== '/\\.css$/');

    // push our custom easy one
    config.module.rules.push({
      test: /\.css$/,
      use: [
        'style-loader',
        {
          loader: 'css-loader',
          options: {
            // Key config
            modules: true,
          },
        },
      ],
    });
    // Return the altered config
    return config;
  }

# The npm run build is also working

## Publish the components
Since we are publishing the components we have to fix the bundler interface points.
Currently that point is "main" in our package.json

But we will change that to three interface points:
"main"
"module"
"src"

The main and module will have interface points in dist folder whereas src will have interface point in lib folder.
  "main": "dist/button.cjs.js",
  "module": "dist/button.esm.js",
  "src": "lib/button.js",

  "main": "dist/gallery.cjs.js",
  "module": "dist/gallery.esm.js",
  "src": "lib/gallery.js",

  "main": "dist/text.cjs.js",
  "module": "dist/text.esm.js",
  "src": "lib/text.js",

 # We will have to adjust the interface point changes in
 i) builder-rollup : Change input from "main" to "src"
 ii) storybook: Change field lookup order


# Note: We got the indication that the cjs modules do not support destructured export.
So for using that we have to get the esm module !


 .storybook/main.js

    // This is where we change the order of resolution of main fields
    config.resolve.mainFields = ['src', 'module', 'main'];


## Publish to repository
i) We will setup the files to be exported which will be dist folder.
  "files": [
    "dist"
  ],
ii) Fix the lerna version to 0.0.25
    Since we have already published these libraries to version 0.0.25 we need to bump up lerna version

vi lerna.json
{
  "$schema": "node_modules/lerna/schemas/lerna-schema.json",
  "useWorkspaces": true,
  "version": "0.0.25"
}

lerna publish

## Now we will create a sample app to use the library
npx create-react-app sample-app-launchpad
cd sample-app-launchpad

vi App.js

import './App.css';

function App() {
  return (
    <div className="App">
      <h1>Sample App using Launchpad</h1>
    </div>
  );
}

export default App;

# Without library app is working

Now we will add library
npm install --save-dev @glassball/button

# Create
import './App.css';
import {Button} from "@glassball/button";

function App() {
  return (
    <div className="App">
      <h1>Sample App using Launchpad</h1>
      <div>
        <Button>Colored Button</Button>
      </div>
    </div>
  );
}

export default App;

# We will add second library as well
npm install @glassball/text


## Create app inside the package
# sample-app-basic
mkdir packages/apps
lerna create sample-app-basic --yes
mv packages/sample-app-basic packages/apps

# Update the package.json
  "workspaces": [
    "packages/*",
    "packages/components/*",
    "packages/apps/*"
  ],

# We could have set this up using vite, but we will keep variables to low
mv packages/apps/sample-app-basic/lib packages/apps/sample-app-basic/src
$ vi packages/apps/sample-app-basic/src/index.js

import React from 'react';
import {createRoot} from "react-dom/client";
import App from './App';

const root = createRoot(document.getElementById('root'));
root.render(<App />);


$ vi packages/apps/sample-app-basic/src/App.js
import React from 'react';

const App = () => {
  return (<h1>App</h1>);
}

export default App;

# Now we will try this using the same module builder-rollup
# We keep in mind here that.
# TBD: We can enhance our builder to look for "main" in absence of source
"src": "src/index.js",

$ lerna add @glassball/builder-rollup --scope=sample-app-basic
# We add the build target
  "scripts": {
    "build": "builder-rollup",

  },

lerna add react --dev --scope=sample-app-basic
lerna add react-dom --dev --scope=sample-app-basic

$ lerna run build --scope=sample-app-basic
The compilation works!

# Now we will deploy it using http-server

lerna add --dev http-server  --scope=sample-app-basic

# We will add a deployment target:

  "scripts": {
    "deploy": "http-server ./dist",
  },

lerna run deploy --scope=sample-app-basic

# Note we need to have the index.html file. We will hardcode it for now.
$ vi dist/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
            name="description"
            content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>React App</title>
</head>
<body>
<noscript>You need to enable JavaScript to run this app.</noscript>
<div id="root"></div>
<script src="./sample-app-basic.cjs.js"></script>
</body>
</html>

# We get the error
ReferenceError: Can't find variable: require

'use strict';

var React = require('react');

# This means that the links haven't been resolved. Since our builder is meant for library, hence we are seeing this behaviour.
# So we will leave it here for now and move on to including something which includes react-table

## Create table library
lerna create @glassball/table --yes
mv packages/table packages/components

lerna add --dev @glassball/builder-rollup --scope=@glassball/table

# Add the dependencies
lerna add react --dev --scope=@glassball/table
lerna add react-dom --dev --scope=@glassball/table
lerna add react-table --dev --scope=@glassball/table
lerna add react@18.x --peer --scope=@glassball/table
lerna add react-dom@18.x --peer --scope=@glassball/table
lerna add react-table@7.x --peer --scope=@glassball/table

# We will add the code lib/basic-table.js
import React from "react";
import { useTable } from "react-table";

export default function Table({ columns, data }) {
  // Use the useTable Hook to send the columns and data to build the table
  const {
    getTableProps, // table props from react-table
    getTableBodyProps, // table body props from react-table
    headerGroups, // headerGroups, if your table has groupings
    rows, // rows for the table based on the data passed
    prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)
  } = useTable({
    columns,
    data
  });

  /*
    Render the UI for your table
    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically
  */
  return (
      <table {...getTableProps()}>
        <thead>
        {headerGroups.map(headerGroup => (
            <tr {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map(column => (
                  <th {...column.getHeaderProps()}>{column.render("Header")}</th>
              ))}
            </tr>
        ))}
        </thead>
        <tbody {...getTableBodyProps()}>
        {rows.map((row, i) => {
          prepareRow(row);
          return (
              <tr {...row.getRowProps()}>
                {row.cells.map(cell => {
                  return <td {...cell.getCellProps()}>{cell.render("Cell")}</td>;
                })}
              </tr>
          );
        })}
        </tbody>
      </table>
  );
}

# We will change the interface points in package.json
  "main": "dist/table.cjs.js",
  "module": "lib/table.esm.js",
  "src": "lib/basic-table.js",

$ Add the build, clean, purge scripts

# The table is built and is also being shown in storybook.
Now we  will try to use it in an application.

sample-app-launchpad/ $ npm install --save-dev @glassball/table
sample-app-launchpad/ $ npm install --save-dev react-table

lerna add --dev @rollup/plugin-commonjs --scope=@glassball/builder-rollup

## We created a styled component
# Reference project: react-table-demo

Now we will add a table with multiple features with major being
i) Sorting
ii) Filtering
iii) Bulk handling
iv) Pagination

and more
We will call it FeatureTable

$ vi packages/components/table/lib/feature/feature-table.js

lerna add --dev react-bootstrap --scope=@glassball/table
lerna add --dev react-icons --scope=@glassball/table
lerna add --dev react-select --scope=@glassball/table
lerna add --dev react-table --scope=@glassball/table
lerna add --dev date-fns --scope=@glassball/table


    "react-bootstrap": "^2.7.0",
    "react-icons": "^4.7.1",
    "react-select": "^5.7.0",
    "react-table": "^7.8.0",
    "date-fns": "^2.29.3",

# The problem of missing exports
$ lerna add --dev rollup-plugin-peer-deps-external --scope=@glassball/builder-rollup

# Replacement
# https://www.npmjs.com/package/rollup-plugin-node-externals
lerna add --dev rollup-plugin-node-externals --scope=@glassball/builder-rollup

both didn't work
We will manually add the dependencies mentioned in peerDependencies

# Note: We had to modify the peerDependencies list and match them with devDependencies as shown below
  "devDependencies": {
    "@glassball/builder-rollup": "^0.0.26",
    "date-fns": "^2.29.3",
    "react": "^18.2.0",
    "react-bootstrap": "^2.7.0",
    "react-dom": "^18.2.0",
    "react-icons": "^4.7.1",
    "react-select": "^5.7.0",
    "react-table": "^7.8.0"
  },
  "peerDependencies": {
    "react": "18.x",
    "react-dom": "18.x",
    "react-table": "7.x",
    "react-bootstrap": "^2.7.0",
    "react-icons": "^4.7.1",
    "react-select": "^5.7.0",
    "date-fns": "^2.29.3"
  }

# Now we will try the plugin
const externals = require('rollup-plugin-node-externals');

const inputOptions = {
  input: inputPath,
  // external: ['react', 'react-dom', 'react-table'],
  plugins: [
    postcss({
      // Key configuration
      modules: true,
    }),
    babel({
      presets: ['@babel/preset-env', '@babel/preset-react'],
      babelHelpers: 'bundled',
    }),
    externals(),
    commonjs(),
    resolve(),
  ],
};

# This was exactly the problem and it is resolved !
Also we do not have to manually maintain this list of externals


Using the time while waiting for library to get updated on npmjs:

Google Search: "why it is necessary to add React"
# https://djoech.medium.com/why-do-you-need-to-import-react-in-functional-components-7385e4329ffb
Babel is already included in the boilerplate generated by create-react-app,
# https://www.geeksforgeeks.org/why-do-you-need-to-import-react-in-functional-components/
# https://stackoverflow.com/questions/71725865/do-i-need-to-import-react-in-every-file

# A blog which has covered a lot of points
# https://blog.harveydelaney.com/creating-your-own-react-component-library/
# https://blog.jakoblind.no/babel-preset-env/

# Push the app bundling using rollup for later.
# We can actually use vite here as well.

## We have got a tutorial where creating a separate project and writing bundler config manually has worked

## package React application

lerna create sample-app --yes
mv packages/sample-app packages/apps

lerna add --dev rollup --scope=sample-app
lerna add --dev rollup-plugin-serve --scope=sample-app
lerna add --dev rollup-plugin-livereload --scope=sample-app
lerna add --dev @rollup/plugin-node-resolve --scope=sample-app
lerna add --dev @rollup/plugin-commonjs --scope=sample-app
lerna add --dev @rollup/plugin-replace --scope=sample-app
lerna add --dev @rollup/plugin-babel --scope=sample-app
lerna add --dev @babel/preset-react --scope=sample-app
lerna add --dev react --scope=sample-app
lerna add --dev react-dom --scope=sample-app

cd packages/apps/sample-app
# Note we have to use mjs extension
touch rollup.config.mjs

# Add the build script
  "scripts": {
    "start": "rollup -c rollup.config.js -w",

  },

# cat rollup.config.js
import serve from "rollup-plugin-serve";
import livereload from "rollup-plugin-livereload";
import babel from '@rollup/plugin-babel';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import replace from '@rollup/plugin-replace';

export default {
  input: "src/index.js",
  output: {
    file: "dist/bundle.js",
    format: "iife",
    sourcemap: true,
  },
  plugins: [
    nodeResolve({
      extensions: [".js"],
    }),
    replace({
      'process.env.NODE_ENV': JSON.stringify( 'development' )
    }),
    babel({
      presets: ["@babel/preset-react"],
    }),
    commonjs(),
    serve({
      open: true,
      verbose: true,
      contentBase: ["", "public"],
      host: "localhost",
      port: 3000,
    }),
    livereload({ watch: "dist" }),
  ]
};

$ vi src/index.js
import React from 'react';
import {createRoot} from 'react-dom/client';
import AppNew from "./AppNew";

const root = createRoot(document.getElementById('root'));
root.render(
    <AppNew />
);

$ vi src/App.js
import React from 'react';

function App(){
  return <h1>Hello World From React-Rollup and Coster</h1>;
}
export default App;

# In package.json set main property as
"main": "src/index.js",

# Create public/index.html
vi public/index.html

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>React - Rollup Test</title>
</head>
<body>
    <noscript>
        You need to enable JavaScript to run this app.
    </noscript>
    <div id="root"></div>
    <script src="../dist/bundle.js"></script>
</body>
</html>
