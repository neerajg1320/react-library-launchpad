react-library-launchpad/ $ history

cd Projects
cd Glassball
cd Production

mkdir react-library-launchpad
cd react-library-launchpad

npm init -y
lerna init

touch project.txt
idea .

mkdir packages/components

lerna create @glassball/button --yes
lerna create @glassball/text --yes
lerna create @glassball/gallery --yes

mv packages/button packages/components
mv packages/text packages/components
mv packages/gallery packages/components

vi package.json

  "workspaces": [
    "packages/components/*"
  ],

lerna create @glassball/builder-rollup --yes
# We do not move this to components as this is not a components

lerna add @glassball/button --scope=@glassball/gallery
lerna add @glassball/text --scope=@glassball/gallery
lerna add react --dev --scope '{@glassball/button,@glassball/text}'
lerna add react@18.x --peer --scope '{@glassball/button,@glassball/text}'

lerna add clsx --dev --scope '{@glassball/button,@glassball/text}'

## Setup builder wiring
# Create a test script
$ cd packages/builder-rollup

# Wire the CLI
"bin": {
  "builder-rollup": "./lib/builder-rollup.js"
},

# For testing we will just create a stub file:

$ vi packages/builder-rollup/lib/builder-rollup.js
#!/usr/bin/env node
console.log('Lets Build');

chmod +x packages/builder-rollup/lib/builder-rollup.js

lerna add @glassball/builder-rollup --dev --scope '{@glassball/button,@glassball/text,@glassball/gallery}'

# Add a target in all three packages
    "build": "builder-rollup",

# Commit
git status .
vi .gitignore
git add .
git commit -m "Initial Commit"
git remote add origin git@github.com:neeraj76/react-library-launchpad.git\ngit push -u origin master

## Write the builder script

lerna add rollup --scope=@glassball/builder-rollup
lerna add @babel/core --scope=@glassball/builder-rollup
lerna add @babel/preset-env --scope=@glassball/builder-rollup
lerna add @babel/preset-react --scope=@glassball/builder-rollup
lerna add @rollup/plugin-babel --scope=@glassball/builder-rollup
lerna add @rollup/plugin-node-resolve --scope=@glassball/builder-rollup
lerna add rollup-plugin-postcss --scope=@glassball/builder-rollup
lerna add postcss --scope=@glassball/builder-rollup

# We need postcss for CSS modules support

# build scripts completion
# In each of the packages we have
    "build": "builder-rollup",
    "clean": "rm -rf dist",
    "purge": "rm -rf node_modules",

# In the main package.json
  "scripts": {
    "build": "lerna run build",
    "clean": "rm -rf dist",
    "purge": "rm -rf node_modules"
  },

## Add Storybook
npx -p @storybook/cli sb init --type react
# Press y to create .npmrc

npm install --save-dev react react-dom
# We already have react installed due to components but the react-dom gets installed

$ npm run storybook
# The storybook is running

git status .
git add .
git commit -m "Added the storybook. Its working with default stories"
git push
git push -u origin storybook

# Wire the component stories to the storybook.
vi .storybook/main.js
module.exports = {
  "stories": [
    "../packages/**/*.stories.mdx",
    "../packages/**/*.stories.@(js|jsx|ts|tsx)"
  ],
:
}

# Create docs folder in button and text packages
mkdir packages/components/button/docs
mkdir packages/components/text/docs

# Add the support for CSS modules in storybook as our components are using the same.
# The support for CSS modules in the builder-rollup has already been added.
  webpackFinal: async (config) => {
    // remove default css rule from storybook
    config.module.rules = config.module.rules.filter((f) => f.test.toString() !== '/\\.css$/');

    // push our custom easy one
    config.module.rules.push({
      test: /\.css$/,
      use: [
        'style-loader',
        {
          loader: 'css-loader',
          options: {
            // Key config
            modules: true,
          },
        },
      ],
    });
    // Return the altered config
    return config;
  }

# The npm run build is also working

## Publish the components
Since we are publishing the components we have to fix the bundler interface points.
Currently that point is "main" in our package.json

But we will change that to three interface points:
"main"
"module"
"src"

The main and module will have interface points in dist folder whereas src will have interface point in lib folder.
  "main": "dist/button.cjs.js",
  "module": "dist/button.esm.js",
  "src": "lib/button.js",

  "main": "dist/gallery.cjs.js",
  "module": "dist/gallery.esm.js",
  "src": "lib/gallery.js",

  "main": "dist/text.cjs.js",
  "module": "dist/text.esm.js",
  "src": "lib/text.js",

 # We will have to adjust the interface point changes in
 i) builder-rollup : Change input from "main" to "src"
 ii) storybook: Change field lookup order


# Note: We got the indication that the cjs modules do not support destructured export.
So for using that we have to get the esm module !


 .storybook/main.js

    // This is where we change the order of resolution of main fields
    config.resolve.mainFields = ['src', 'module', 'main'];


## Publish to repository
i) We will setup the files to be exported which will be dist folder.
  "files": [
    "dist"
  ],
ii) Fix the lerna version to 0.0.25
    Since we have already published these libraries to version 0.0.25 we need to bump up lerna version

vi lerna.json
{
  "$schema": "node_modules/lerna/schemas/lerna-schema.json",
  "useWorkspaces": true,
  "version": "0.0.25"
}

